/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//       Let modules.config to store module configurations that share both shortreads and longreads
process {

    withName: 'NANOPLOT' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoPlot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PYCOQC' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/QC_longreads/PycoQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PORECHOP_PORECHOP' {
        ext.args = ''
        ext.prefix = { "${meta.id}.porechop" }
        publishDir = [
            [
                path: { "${params.outdir}/trimming/longreads" },
                pattern: "*.fastq.gz",
                mode: params.publish_dir_mode,
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/trimming/longreads" },
                pattern: "*.log",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: 'UNICYCLER' {
        ext.args = params.unicycler_args ? "${params.unicycler_args}" : ''
        publishDir = [
            path: { "${params.outdir}/Unicycler" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CANU' {
        ext.args = {
            [ params.canu_args ? "${params.canu_args}" : '',
            "merylMemory=${task.memory.toGiga()}G",
            "merylThreads=$task.cpus",
            "hapThreads=${task.cpus}",
            "batMemory=${task.memory.toGiga()}G",
            "redMemory=${task.memory.toGiga()}G",
            "redThreads=${task.cpus}",
            "oeaMemory=${task.memory.toGiga()}G",
            "oeaThreads=${task.cpus}",
            "corMemory=${task.memory.toGiga()}G",
            "corThreads=${task.cpus}"
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/Canu" },
            mode: params.publish_dir_mode,
            pattern: "*.{contigs.fasta.gz,report}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args = '-x ava-ont'
    }

    withName: 'MINIMAP2_CONSENSUS' {
        ext.args = '-x map-ont'
    }

    withName: 'MINIMAP2_POLISH' {
        ext.args = '-x map-ont'
    }

    withName: 'MINIASM' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Miniasm" },
            mode: params.publish_dir_mode,
            pattern: '*.fasta.gz',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DRAGONFLYE' {
        ext.args = {
            if ( meta.gsize && !meta.gsize.equals('NA') ){
                if ( !params.dragonflye_args.contains("--gsize") ) {
                    "--gsize ${meta.gsize} ${params.dragonflye_args}"
                } else {
                    params.dragonflye_args ?: ''
                }
            } else {
                params.dragonflye_args ?: ''
            }
        }
        publishDir = [
            path: { "${params.outdir}/Dragonflye" },
            mode: params.publish_dir_mode,
            pattern: "*.{fa,log,gfa}",
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else if (filename.endsWith('.log')) {
                    "${meta.id}.${filename}"
                } else if (filename.endsWith('.gfa')) {
                    "${meta.id}.gfa"
                } else {
                    filename
                }
            }
        ]
    }

    withName: 'RACON' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Miniasm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MEDAKA' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NANOPOLISH' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Nanopolish" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KRAKEN2' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Kraken2" },
            mode: params.publish_dir_mode,
            pattern: "*report.txt",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KRAKEN2_LONG' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: params.publish_dir_mode,
            pattern: "*report.txt",
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else {
                    "${filename.replaceFirst('\\..+$', '')}_longreads${filename.substring(filename.lastIndexOf('.'))}"
                }
            }
        ]
    }

    withName: 'QUAST|QUAST_BYREFSEQID' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/QUAST" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml') || filename.endsWith('.tsv')){
                    null
                } else if (filename.startsWith('GCF')){
                    "runs_per_reference/${filename}"
                }
                else {
                    "${filename}"
                }
            }
        ]
    }

    withName: 'PROKKA' {
        ext.args = params.prokka_args ? "${params.prokka_args}" : ''
        publishDir = [
            path: { "${params.outdir}/Prokka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DFAST' {
        ext.args  = ''
        ext.args2 = ''
        publishDir = [
            path: { "${params.outdir}/DFAST" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC_CUSTOM' {
        ext.args = '-k yaml'
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
        withName: ABRICATE_RUN {
        publishDir = [
            path: { "${params.outdir}/arg/abricate/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args =  [
            "--db ${params.arg_abricate_db_id}",
            "--minid ${params.arg_abricate_minid}",
            "--mincov ${params.arg_abricate_mincov}"
        ].join(' ').trim()
    }

    withName: AMRFINDERPLUS_UPDATE {
        publishDir = [
            path: { "${params.outdir}/databases/amrfinderplus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/arg/amrfinderplus/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = {
            [
                "--ident_min ${params.arg_amrfinderplus_identmin}",
                "--coverage_min ${params.arg_amrfinderplus_coveragemin}",
                "--translation_table ${params.arg_amrfinderplus_translationtable}",
                params.arg_amrfinderplus_plus ? '--plus' : '',
                params.arg_amrfinderplus_name ? "--name ${meta.id}" : ''
            ].join(' ').trim()
        }
    }

    withName: DEEPARG_DOWNLOADDATA {
        publishDir = [
            path: { "${params.outdir}/databases/deeparg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DEEPARG_PREDICT {
        publishDir = [
            path: { "${params.outdir}/arg/deeparg/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "--type prot",
            "--min-prob ${params.arg_deeparg_minprob}",
            "--arg-alignment-identity ${params.arg_deeparg_alignmentidentity}",
            "--arg-alignment-evalue ${params.arg_deeparg_alignmentevalue}",
            "--arg-alignment-overlap ${params.arg_deeparg_alignmentoverlap}",
            "--arg-num-alignments-per-entry ${params.arg_deeparg_numalignmentsperentry}"
        ].join(' ').trim()
    }

    withName: FARGENE {
        tag = {"${meta.id}|${hmm_model}"}
        publishDir = [
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/results_summary.txt"
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/{hmmsearchresults,predictedGenes,retrievedFragments}/*"
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/{tmpdir}/*",
                enabled: params.arg_fargene_savetmpfiles
            ]
        ]
        ext.prefix = { "${meta.hmm_class}" }
        ext.args =  { "--hmm-model ${params.arg_fargene_hmmmodel} --logfile ${meta.id}-${meta.hmm_class}.log --min-orf-length ${params.arg_fargene_minorflength} --score ${params.arg_fargene_score} --translation-format ${params.arg_fargene_translationformat}" }
        ext.args = params.arg_fargene_orffinder ? '--orf-finder' : ''
    }

    withName: UNTAR_CARD {

        ext.prefix = "card_database"
        publishDir = [
            [
                path: { "${params.outdir}/databases/rgi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]

    }

    withName: RGI_CARDANNOTATION {
        publishDir = [
            [
                path: { "${params.outdir}/databases/rgi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    withName: RGI_MAIN {
        publishDir = [
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{txt}"
                ],
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{json}",
                enabled: params.arg_rgi_savejson
                ],
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*temp*",
                enabled: params.arg_rgi_savetmpfiles
            ]
        ]
        ext.args2 = [
            "--alignment_tool ${params.arg_rgi_alignmenttool}",
            "--data ${params.arg_rgi_data}",
            params.arg_rgi_includeloose ? '--include_loose' : '',
            params.arg_rgi_includenudge ? '--include_nudge' : '',
            params.arg_rgi_lowquality ? '--low_quality' : '',
            params.arg_rgi_split_prodigal_jobs ? '--split_prodigal_jobs' : ''
        ].join(' ').trim()
    }

    withName: HAMRONIZATION_ABRICATE {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/abricate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${report}.abricate" }
    }

    withName: HAMRONIZATION_AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/amrfinderplus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${report}.amrfinderplus" }
    }

    withName: HAMRONIZATION_DEEPARG {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/deeparg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${report}.deeparg" }
    }

    withName: HAMRONIZATION_RGI {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/rgi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${report}.rgi" }
    }

    withName: HAMRONIZATION_FARGENE {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/fargene" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_${report}.fargene" }
    }

    withName: HAMRONIZATION_SUMMARIZE {
        publishDir = [
            path: { "${params.outdir}/reports/hamronization_summarize" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv,html}",
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else if (filename.endsWith('.log')) {
                    "${meta.id}.${filename}"
                } else {
                    filename
                }
            }

        ]
    }
    
    withName: ARGNORM_ABRICATE {
        publishDir = [
            path: {"${params.outdir}/arg/argnorm/abricate/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.normalized.tsv" }
        ext.args = "--hamronized"
    }

    withName: ARGNORM_AMRFINDERPLUS {
        publishDir = [
            path: {"${params.outdir}/arg/argnorm/amrfinderplus/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.normalized.tsv" }
        ext.args = "--hamronized"
    }

    withName: ARGNORM_DEEPARG {
        publishDir = [
            path: {"${params.outdir}/arg/argnorm/deeparg/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { input_tsv.toString().endsWith(".potential.ARG.deeparg.tsv") ? "${meta.id}.potential.ARG.normalized.tsv" : "${meta.id}.ARG.normalized.tsv" }
        ext.args = "--hamronized"
    }

    withName: KLEBORATE {
        publishDir = [
            path: {"${params.outdir}/taxonomy/kleborate/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MLST {
        publishDir = [
            path: {"${params.outdir}/taxonomy/mlst/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: ECTYPER {
        publishDir = [
            path: {"${params.outdir}/taxonomy/ectyper/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: GAMBIT_TAXONOMY {
        publishDir = [
            path: {"${params.outdir}/taxonomy/gambit/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: MOBSUITE_RECON {
        publishDir = [
            path: {"${params.outdir}/pitis/plasmids/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: INTEGRON_FINDER {
        publishDir = [
            path: {"${params.outdir}/pitis/integrons/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_fastqc) {
    process {
        withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
            ext.args = '--quiet'
            publishDir = [
                path: { "${params.outdir}/FastQC/raw" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
            ext.args = '--quiet'
            publishDir = [
                path: { "${params.outdir}/FastQC/trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
if (!params.skip_fastp) {
    process {
        withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTP' {
            ext.args = params.fastp_args ? params.fastp_args : ''
            publishDir = [
                [
                    path: { "${params.outdir}/trimming/shortreads" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastp.fastq.gz",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimming/shortreads/json_html" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{json,html}"
                ],
                [
                    path: { "${params.outdir}/trimming/shortreads/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/trimming/shortreads" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fail.fastq.gz",
                    enabled: params.save_trimmed_fail
                ]
            ]
        }
    }
    if (!params.skip_fastqc) {
        process {
            withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
                ext.args = '--quiet'
                publishDir = [
                    path: { "${params.outdir}/FastQC/trim" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{json,html}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}
if (!params.skip_kmerfinder) {
    process {
        withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER' {
            errorStrategy = { task.exitStatus in [1, 137, 139] ? 'retry' : 'finish'}
            maxRetries = 3

            ext.args = ''
            publishDir = [
                path: { "${params.outdir}/Kmerfinder/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt,json}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER_SUMMARY' {
            ext.args = ''
            publishDir = [
                path: { "${params.outdir}/Kmerfinder" },
                mode: params.publish_dir_mode,
                pattern: "*.csv",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.annotation_tool == 'bakta') {
    if (params.baktadb_download == true) {
        process {
            withName: '.*:.*:BAKTA_DBDOWNLOAD_RUN:BAKTA_BAKTADBDOWNLOAD' {
                ext.args = params.baktadb_download_args ? params.baktadb_download_args : ''
            }
        }
    }
    process {
        withName: '.*:.*:BAKTA_DBDOWNLOAD_RUN:BAKTA_BAKTA' {
            ext.args    = ''
            publishDir  = [
                path: { "${params.outdir}/Bakta/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
